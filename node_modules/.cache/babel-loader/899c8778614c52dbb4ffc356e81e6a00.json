{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _escapeRegExp = require('lodash/escapeRegExp');\nvar _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar findWithRegex = function findWithRegex(regex, contentBlock, callback) {\n  var contentBlockText = contentBlock.getText();\n\n  // exclude entities, when matching\n  contentBlock.findEntityRanges(function (character) {\n    return !character.getEntity();\n  }, function (nonEntityStart, nonEntityEnd) {\n    var text = contentBlockText.slice(nonEntityStart, nonEntityEnd);\n    var matchArr = void 0;\n    var start = void 0;\n    var prevLastIndex = regex.lastIndex;\n\n    // Go through all matches in the text and return the indices to the callback\n    // Break the loop if lastIndex is not changed\n    while ((matchArr = regex.exec(text)) !== null) {\n      // eslint-disable-line\n      if (regex.lastIndex === prevLastIndex) {\n        break;\n      }\n      prevLastIndex = regex.lastIndex;\n      start = nonEntityStart + matchArr.index;\n      callback(start, start + matchArr[0].length);\n    }\n  });\n};\nexports.default = function (trigger, supportWhiteSpace, regExp) {\n  //eslint-disable-line\n  var MENTION_REGEX = supportWhiteSpace ? new RegExp((0, _escapeRegExp2.default)(trigger) + '(' + regExp + '|\\\\s){0,}', 'g') : new RegExp('(\\\\s|^)' + (0, _escapeRegExp2.default)(trigger) + regExp, 'g');\n  return function (contentBlock, callback) {\n    findWithRegex(MENTION_REGEX, contentBlock, callback);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}