{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _draftJs = require('draft-js');\nvar _addBlock = require('./modifiers/addBlock');\nvar _addBlock2 = _interopRequireDefault(_addBlock);\nvar _removeBlock = require('./modifiers/removeBlock');\nvar _removeBlock2 = _interopRequireDefault(_removeBlock);\nvar _constants = require('./constants');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nexports.default = function (selection, dataTransfer, isInternal, _ref) {\n  var getEditorState = _ref.getEditorState,\n    setEditorState = _ref.setEditorState;\n  var editorState = getEditorState();\n\n  // Get data 'text' (anything else won't move the cursor) and expecting kind of data (text/key)\n  var raw = dataTransfer.data.getData('text');\n  var data = raw ? raw.split(':') : [];\n  if (data.length !== 2) {\n    return undefined;\n  }\n\n  // Existing block dropped\n  if (data[0] === _constants.DRAFTJS_BLOCK_KEY) {\n    var blockKey = data[1];\n\n    // Get content, selection, block\n    var contentState = editorState.getCurrentContent();\n    var block = contentState.getBlockForKey(blockKey);\n    var entity = contentState.getEntity(block.getEntityAt(0));\n    var contentStateAfterInsert = (0, _addBlock2.default)(editorState, selection, block.getType(), entity.data, entity.type);\n    var contentStateAfterRemove = (0, _removeBlock2.default)(contentStateAfterInsert, blockKey);\n\n    // force to new selection\n    var newSelection = new _draftJs.SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: 0\n    });\n    var newState = _draftJs.EditorState.push(editorState, contentStateAfterRemove, 'move-block');\n    setEditorState(_draftJs.EditorState.forceSelection(newState, newSelection));\n  }\n  return 'handled';\n};","map":null,"metadata":{},"sourceType":"script"}