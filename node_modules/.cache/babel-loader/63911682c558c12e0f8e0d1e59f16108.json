{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This file is a fork of ContentBlock adding support for nesting references by\n * providing links to children, parent, prevSibling, and nextSibling.\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nvar CharacterMetadata = require(\"./CharacterMetadata\");\nvar findRangesImmutable = require(\"./findRangesImmutable\");\nvar Immutable = require(\"immutable\");\nvar List = Immutable.List,\n  Map = Immutable.Map,\n  OrderedSet = Immutable.OrderedSet,\n  Record = Immutable.Record,\n  Repeat = Immutable.Repeat;\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n  parent: null,\n  characterList: List(),\n  data: Map(),\n  depth: 0,\n  key: '',\n  text: '',\n  type: 'unstyled',\n  children: List(),\n  prevSibling: null,\n  nextSibling: null\n};\nvar haveEqualStyle = function haveEqualStyle(charA, charB) {\n  return charA.getStyle() === charB.getStyle();\n};\nvar haveEqualEntity = function haveEqualEntity(charA, charB) {\n  return charA.getEntity() === charB.getEntity();\n};\nvar decorateCharacterList = function decorateCharacterList(config) {\n  if (!config) {\n    return config;\n  }\n  var characterList = config.characterList,\n    text = config.text;\n  if (text && !characterList) {\n    config.characterList = List(Repeat(CharacterMetadata.EMPTY, text.length));\n  }\n  return config;\n};\nvar ContentBlockNode = /*#__PURE__*/function (_ref) {\n  _inheritsLoose(ContentBlockNode, _ref);\n  function ContentBlockNode() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRecord;\n\n    /* eslint-disable-next-line constructor-super */\n    return _ref.call(this, decorateCharacterList(props)) || this;\n  }\n  var _proto = ContentBlockNode.prototype;\n  _proto.getKey = function getKey() {\n    return this.get('key');\n  };\n  _proto.getType = function getType() {\n    return this.get('type');\n  };\n  _proto.getText = function getText() {\n    return this.get('text');\n  };\n  _proto.getCharacterList = function getCharacterList() {\n    return this.get('characterList');\n  };\n  _proto.getLength = function getLength() {\n    return this.getText().length;\n  };\n  _proto.getDepth = function getDepth() {\n    return this.get('depth');\n  };\n  _proto.getData = function getData() {\n    return this.get('data');\n  };\n  _proto.getInlineStyleAt = function getInlineStyleAt(offset) {\n    var character = this.getCharacterList().get(offset);\n    return character ? character.getStyle() : EMPTY_SET;\n  };\n  _proto.getEntityAt = function getEntityAt(offset) {\n    var character = this.getCharacterList().get(offset);\n    return character ? character.getEntity() : null;\n  };\n  _proto.getChildKeys = function getChildKeys() {\n    return this.get('children');\n  };\n  _proto.getParentKey = function getParentKey() {\n    return this.get('parent');\n  };\n  _proto.getPrevSiblingKey = function getPrevSiblingKey() {\n    return this.get('prevSibling');\n  };\n  _proto.getNextSiblingKey = function getNextSiblingKey() {\n    return this.get('nextSibling');\n  };\n  _proto.findStyleRanges = function findStyleRanges(filterFn, callback) {\n    findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);\n  };\n  _proto.findEntityRanges = function findEntityRanges(filterFn, callback) {\n    findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);\n  };\n  return ContentBlockNode;\n}(Record(defaultRecord));\nmodule.exports = ContentBlockNode;","map":null,"metadata":{},"sourceType":"script"}