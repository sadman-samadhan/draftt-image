{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _draftJs = require('draft-js');\nvar _insertNewLine = require('./modifiers/insertNewLine');\nvar _insertNewLine2 = _interopRequireDefault(_insertNewLine);\nvar _setSelection = require('./modifiers/setSelection');\nvar _setSelection2 = _interopRequireDefault(_setSelection);\nvar _setSelectionToBlock = require('./modifiers/setSelectionToBlock');\nvar _setSelectionToBlock2 = _interopRequireDefault(_setSelectionToBlock);\nvar _createDecorator = require('./createDecorator');\nvar _createDecorator2 = _interopRequireDefault(_createDecorator);\nvar _createBlockKeyStore = require('./utils/createBlockKeyStore');\nvar _createBlockKeyStore2 = _interopRequireDefault(_createBlockKeyStore);\nvar _blockInSelection = require('./utils/blockInSelection');\nvar _blockInSelection2 = _interopRequireDefault(_blockInSelection);\nvar _getBlockMapKeys = require('./utils/getBlockMapKeys');\nvar _getBlockMapKeys2 = _interopRequireDefault(_getBlockMapKeys);\nvar _removeBlock = require('./modifiers/removeBlock');\nvar _removeBlock2 = _interopRequireDefault(_removeBlock);\nvar _style = {\n  \"unfocused\": \"draftJsFocusPlugin__unfocused__1Wvrs\",\n  \"focused\": \"draftJsFocusPlugin__focused__3Mksn\"\n};\nvar _style2 = _interopRequireDefault(_style);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar focusableBlockIsSelected = function focusableBlockIsSelected(editorState, blockKeyStore) {\n  var selection = editorState.getSelection();\n  if (selection.getAnchorKey() !== selection.getFocusKey()) {\n    return false;\n  }\n  var content = editorState.getCurrentContent();\n  var block = content.getBlockForKey(selection.getAnchorKey());\n  return blockKeyStore.includes(block.getKey());\n};\nvar deleteCommands = ['backspace', 'backspace-word', 'backspace-to-start-of-line', 'delete', 'delete-word', 'delete-to-end-of-block'];\nexports.default = function () {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var blockKeyStore = (0, _createBlockKeyStore2.default)({});\n  var theme = config.theme ? config.theme : _style2.default;\n  var lastSelection = void 0;\n  var lastContentState = void 0;\n  return {\n    handleReturn: function handleReturn(event, editorState, _ref) {\n      var setEditorState = _ref.setEditorState;\n\n      // if a focusable block is selected then overwrite new line behavior to custom\n      if (focusableBlockIsSelected(editorState, blockKeyStore)) {\n        setEditorState((0, _insertNewLine2.default)(editorState));\n        return 'handled';\n      }\n      return 'not-handled';\n    },\n    handleKeyCommand: function handleKeyCommand(command, editorState, eventTimeStamp, _ref2) {\n      var setEditorState = _ref2.setEditorState;\n      if (deleteCommands.includes(command) && focusableBlockIsSelected(editorState, blockKeyStore)) {\n        var key = editorState.getSelection().getStartKey();\n        var newEditorState = (0, _removeBlock2.default)(editorState, key);\n        if (newEditorState !== editorState) {\n          setEditorState(newEditorState);\n          return 'handled';\n        }\n      }\n      return 'not-handled';\n    },\n    onChange: function onChange(editorState) {\n      // in case the content changed there is no need to re-render blockRendererFn\n      // since if a block was added it will be rendered anyway and if it was text\n      // then the change was not a pure selection change\n      var contentState = editorState.getCurrentContent();\n      if (!contentState.equals(lastContentState)) {\n        lastContentState = contentState;\n        return editorState;\n      }\n      lastContentState = contentState;\n\n      // if the selection didn't change there is no need to re-render\n      var selection = editorState.getSelection();\n      if (lastSelection && selection.equals(lastSelection)) {\n        lastSelection = editorState.getSelection();\n        return editorState;\n      }\n\n      // Note: Only if the previous or current selection contained a focusableBlock a re-render is needed.\n      var focusableBlockKeys = blockKeyStore.getAll();\n      if (lastSelection) {\n        var lastBlockMapKeys = (0, _getBlockMapKeys2.default)(contentState, lastSelection.getStartKey(), lastSelection.getEndKey());\n        if (lastBlockMapKeys.some(function (key) {\n          return focusableBlockKeys.includes(key);\n        })) {\n          lastSelection = selection;\n          // By forcing the selection the editor will trigger the blockRendererFn which is\n          // necessary for the blockProps containing isFocus to be passed down again.\n          return _draftJs.EditorState.forceSelection(editorState, editorState.getSelection());\n        }\n      }\n      var currentBlockMapKeys = (0, _getBlockMapKeys2.default)(contentState, selection.getStartKey(), selection.getEndKey());\n      if (currentBlockMapKeys.some(function (key) {\n        return focusableBlockKeys.includes(key);\n      })) {\n        lastSelection = selection;\n        // By forcing the selection the editor will trigger the blockRendererFn which is\n        // necessary for the blockProps containing isFocus to be passed down again.\n        return _draftJs.EditorState.forceSelection(editorState, editorState.getSelection());\n      }\n      return editorState;\n    },\n    // TODO edgecase: if one block is selected and the user wants to expand the selection using the shift key\n    keyBindingFn: function keyBindingFn(evt, _ref3) {\n      var getEditorState = _ref3.getEditorState,\n        setEditorState = _ref3.setEditorState;\n      var editorState = getEditorState();\n      // TODO match by entitiy instead of block type\n      if (focusableBlockIsSelected(editorState, blockKeyStore)) {\n        // arrow left\n        if (evt.keyCode === 37) {\n          (0, _setSelection2.default)(getEditorState, setEditorState, 'up', evt);\n        }\n        // arrow right\n        if (evt.keyCode === 39) {\n          (0, _setSelection2.default)(getEditorState, setEditorState, 'down', evt);\n        }\n        // arrow up\n        if (evt.keyCode === 38) {\n          (0, _setSelection2.default)(getEditorState, setEditorState, 'up', event);\n        }\n        // arrow down\n        if (evt.keyCode === 40) {\n          (0, _setSelection2.default)(getEditorState, setEditorState, 'down', event);\n          return;\n        }\n      }\n\n      // Don't manually overwrite in case the shift key is used to avoid breaking\n      // native behaviour that works anyway.\n      if (evt.shiftKey) {\n        return;\n      }\n\n      // arrow left\n      if (evt.keyCode === 37) {\n        // Covering the case to select the before block\n        var selection = editorState.getSelection();\n        var selectionKey = selection.getAnchorKey();\n        var beforeBlock = editorState.getCurrentContent().getBlockBefore(selectionKey);\n        // only if the selection caret is a the left most position\n        if (beforeBlock && selection.getAnchorOffset() === 0 && blockKeyStore.includes(beforeBlock.getKey())) {\n          (0, _setSelection2.default)(getEditorState, setEditorState, 'up', evt);\n        }\n      }\n\n      // arrow right\n      if (evt.keyCode === 39) {\n        // Covering the case to select the after block\n        var _selection = editorState.getSelection();\n        var _selectionKey = _selection.getFocusKey();\n        var currentBlock = editorState.getCurrentContent().getBlockForKey(_selectionKey);\n        var afterBlock = editorState.getCurrentContent().getBlockAfter(_selectionKey);\n        var notAtomicAndLastPost = currentBlock.getType() !== 'atomic' && currentBlock.getLength() === _selection.getFocusOffset();\n        if (afterBlock && notAtomicAndLastPost && blockKeyStore.includes(afterBlock.getKey())) {\n          (0, _setSelection2.default)(getEditorState, setEditorState, 'down', evt);\n        }\n      }\n\n      // arrow up\n      if (evt.keyCode === 38) {\n        // Covering the case to select the before block with arrow up\n        var _selectionKey2 = editorState.getSelection().getAnchorKey();\n        var _beforeBlock = editorState.getCurrentContent().getBlockBefore(_selectionKey2);\n        if (_beforeBlock && blockKeyStore.includes(_beforeBlock.getKey())) {\n          (0, _setSelection2.default)(getEditorState, setEditorState, 'up', event);\n        }\n      }\n\n      // arrow down\n      if (evt.keyCode === 40) {\n        // Covering the case to select the after block with arrow down\n        var _selectionKey3 = editorState.getSelection().getAnchorKey();\n        var _afterBlock = editorState.getCurrentContent().getBlockAfter(_selectionKey3);\n        if (_afterBlock && blockKeyStore.includes(_afterBlock.getKey())) {\n          (0, _setSelection2.default)(getEditorState, setEditorState, 'down', event);\n        }\n      }\n    },\n    // Wrap all block-types in block-focus decorator\n    blockRendererFn: function blockRendererFn(contentBlock, _ref4) {\n      var getEditorState = _ref4.getEditorState,\n        setEditorState = _ref4.setEditorState;\n\n      // This makes it mandatory to have atomic blocks for focus but also improves performance\n      // since all the selection checks are not necessary.\n      // In case there is a use-case where focus makes sense for none atomic blocks we can add it\n      // in the future.\n      if (contentBlock.getType() !== 'atomic') {\n        return undefined;\n      }\n      var editorState = getEditorState();\n      var isFocused = (0, _blockInSelection2.default)(editorState, contentBlock.getKey());\n      return {\n        props: {\n          isFocused: isFocused,\n          isCollapsedSelection: editorState.getSelection().isCollapsed(),\n          setFocusToBlock: function setFocusToBlock() {\n            (0, _setSelectionToBlock2.default)(getEditorState, setEditorState, contentBlock);\n          }\n        }\n      };\n    },\n    decorator: (0, _createDecorator2.default)({\n      theme: theme,\n      blockKeyStore: blockKeyStore\n    })\n  };\n};","map":null,"metadata":{},"sourceType":"script"}