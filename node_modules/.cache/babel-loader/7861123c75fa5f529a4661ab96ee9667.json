{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MentionSuggestions = undefined;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _draftJs = require('draft-js');\nvar _escapeRegExp = require('lodash/escapeRegExp');\nvar _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);\nvar _Entry = require('./Entry');\nvar _Entry2 = _interopRequireDefault(_Entry);\nvar _addMention = require('../modifiers/addMention');\nvar _addMention2 = _interopRequireDefault(_addMention);\nvar _decodeOffsetKey = require('../utils/decodeOffsetKey');\nvar _decodeOffsetKey2 = _interopRequireDefault(_decodeOffsetKey);\nvar _getSearchText2 = require('../utils/getSearchText');\nvar _getSearchText3 = _interopRequireDefault(_getSearchText2);\nvar _defaultEntryComponent = require('./Entry/defaultEntryComponent');\nvar _defaultEntryComponent2 = _interopRequireDefault(_defaultEntryComponent);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar MentionSuggestions = exports.MentionSuggestions = function (_Component) {\n  _inherits(MentionSuggestions, _Component);\n  function MentionSuggestions() {\n    var _ref;\n    var _temp, _this, _ret;\n    _classCallCheck(this, MentionSuggestions);\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MentionSuggestions.__proto__ || Object.getPrototypeOf(MentionSuggestions)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      isActive: false,\n      focusedOptionIndex: 0\n    }, _this.componentDidUpdate = function (prevProps, prevState) {\n      if (_this.popover) {\n        // In case the list shrinks there should be still an option focused.\n        // Note: this might run multiple times and deduct 1 until the condition is\n        // not fullfilled anymore.\n        var size = _this.props.suggestions.length;\n        if (size > 0 && _this.state.focusedOptionIndex >= size) {\n          _this.setState({\n            focusedOptionIndex: size - 1\n          });\n        }\n\n        // Note: this is a simple protection for the error when componentDidUpdate\n        // try to get new getPortalClientRect, but the key already was deleted by\n        // previous action. (right now, it only can happened when set the mention\n        // trigger to be multi-characters which not supported anyway!)\n        if (!_this.props.store.getAllSearches().has(_this.activeOffsetKey)) {\n          return;\n        }\n        var decoratorRect = _this.props.store.getPortalClientRect(_this.activeOffsetKey);\n        var newStyles = _this.props.positionSuggestions({\n          decoratorRect: decoratorRect,\n          prevProps: prevProps,\n          prevState: prevState,\n          props: _this.props,\n          state: _this.state,\n          popover: _this.popover\n        });\n        Object.keys(newStyles).forEach(function (key) {\n          _this.popover.style[key] = newStyles[key];\n        });\n      }\n    }, _this.componentWillUnmount = function () {\n      _this.props.callbacks.onChange = undefined;\n    }, _this.onEditorStateChange = function (editorState) {\n      var searches = _this.props.store.getAllSearches();\n\n      // if no search portal is active there is no need to show the popover\n      if (searches.size === 0) {\n        return editorState;\n      }\n      var removeList = function removeList() {\n        _this.props.store.resetEscapedSearch();\n        _this.closeDropdown();\n        return editorState;\n      };\n\n      // get the current selection\n      var selection = editorState.getSelection();\n      var anchorKey = selection.getAnchorKey();\n      var anchorOffset = selection.getAnchorOffset();\n\n      // the list should not be visible if a range is selected or the editor has no focus\n      if (!selection.isCollapsed() || !selection.getHasFocus()) return removeList();\n\n      // identify the start & end positon of each search-text\n      var offsetDetails = searches.map(function (offsetKey) {\n        return (0, _decodeOffsetKey2.default)(offsetKey);\n      });\n\n      // a leave can be empty when it is removed due e.g. using backspace\n      // do not check leaves, use full decorated portal text\n      var leaves = offsetDetails.filter(function (_ref2) {\n        var blockKey = _ref2.blockKey;\n        return blockKey === anchorKey;\n      }).map(function (_ref3) {\n        var blockKey = _ref3.blockKey,\n          decoratorKey = _ref3.decoratorKey;\n        return editorState.getBlockTree(blockKey).getIn([decoratorKey]);\n      });\n\n      // if all leaves are undefined the popover should be removed\n      if (leaves.every(function (leave) {\n        return leave === undefined;\n      })) {\n        return removeList();\n      }\n\n      // Checks that the cursor is after the @ character but still somewhere in\n      // the word (search term). Setting it to allow the cursor to be left of\n      // the @ causes troubles due selection confusion.\n      var plainText = editorState.getCurrentContent().getPlainText();\n      var selectionIsInsideWord = leaves.filter(function (leave) {\n        return leave !== undefined;\n      }).map(function (_ref4) {\n        var start = _ref4.start,\n          end = _ref4.end;\n        return start === 0 && anchorOffset === _this.props.mentionTrigger.length && plainText.charAt(anchorOffset) !== _this.props.mentionTrigger && new RegExp(String.raw({\n          raw: '' + (0, _escapeRegExp2.default)(_this.props.mentionTrigger)\n        }), 'g').test(plainText) && anchorOffset <= end ||\n        // @ is the first character\n        anchorOffset > start + _this.props.mentionTrigger.length && anchorOffset <= end;\n      } // @ is in the text or at the end\n      );\n\n      if (selectionIsInsideWord.every(function (isInside) {\n        return isInside === false;\n      })) return removeList();\n      var lastActiveOffsetKey = _this.activeOffsetKey;\n      _this.activeOffsetKey = selectionIsInsideWord.filter(function (value) {\n        return value === true;\n      }).keySeq().first();\n      _this.onSearchChange(editorState, selection, _this.activeOffsetKey, lastActiveOffsetKey);\n\n      // make sure the escaped search is reseted in the cursor since the user\n      // already switched to another mention search\n      if (!_this.props.store.isEscaped(_this.activeOffsetKey)) {\n        _this.props.store.resetEscapedSearch();\n      }\n\n      // If none of the above triggered to close the window, it's safe to assume\n      // the dropdown should be open. This is useful when a user focuses on another\n      // input field and then comes back: the dropdown will show again.\n      if (!_this.state.isActive && !_this.props.store.isEscaped(_this.activeOffsetKey) && _this.props.suggestions.length > 0) {\n        _this.openDropdown();\n      }\n\n      // makes sure the focused index is reseted every time a new selection opens\n      // or the selection was moved to another mention search\n      if (_this.lastSelectionIsInsideWord === undefined || !selectionIsInsideWord.equals(_this.lastSelectionIsInsideWord)) {\n        _this.setState({\n          focusedOptionIndex: 0\n        });\n      }\n      _this.lastSelectionIsInsideWord = selectionIsInsideWord;\n      return editorState;\n    }, _this.onSearchChange = function (editorState, selection, activeOffsetKey, lastActiveOffsetKey) {\n      var _getSearchText = (0, _getSearchText3.default)(editorState, selection, _this.props.mentionTrigger),\n        searchValue = _getSearchText.matchingString;\n      if (_this.lastSearchValue !== searchValue || activeOffsetKey !== lastActiveOffsetKey) {\n        _this.lastSearchValue = searchValue;\n        _this.props.onSearchChange({\n          value: searchValue\n        });\n      }\n    }, _this.onDownArrow = function (keyboardEvent) {\n      keyboardEvent.preventDefault();\n      var newIndex = _this.state.focusedOptionIndex + 1;\n      _this.onMentionFocus(newIndex >= _this.props.suggestions.length ? 0 : newIndex);\n    }, _this.onTab = function (keyboardEvent) {\n      keyboardEvent.preventDefault();\n      _this.commitSelection();\n    }, _this.onUpArrow = function (keyboardEvent) {\n      keyboardEvent.preventDefault();\n      if (_this.props.suggestions.length > 0) {\n        var newIndex = _this.state.focusedOptionIndex - 1;\n        _this.onMentionFocus(newIndex < 0 ? _this.props.suggestions.length - 1 : newIndex);\n      }\n    }, _this.onEscape = function (keyboardEvent) {\n      keyboardEvent.preventDefault();\n      var activeOffsetKey = _this.lastSelectionIsInsideWord.filter(function (value) {\n        return value === true;\n      }).keySeq().first();\n      _this.props.store.escapeSearch(activeOffsetKey);\n      _this.closeDropdown();\n\n      // to force a re-render of the outer component to change the aria props\n      _this.props.store.setEditorState(_this.props.store.getEditorState());\n    }, _this.onMentionSelect = function (mention) {\n      // Note: This can happen in case a user typed @xxx (invalid mention) and\n      // then hit Enter. Then the mention will be undefined.\n      if (!mention) {\n        return;\n      }\n      if (_this.props.onAddMention) {\n        _this.props.onAddMention(mention);\n      }\n      _this.closeDropdown();\n      var newEditorState = (0, _addMention2.default)(_this.props.store.getEditorState(), mention, _this.props.mentionPrefix, _this.props.mentionTrigger, _this.props.entityMutability);\n      _this.props.store.setEditorState(newEditorState);\n    }, _this.onMentionFocus = function (index) {\n      var descendant = 'mention-option-' + _this.key + '-' + index;\n      _this.props.ariaProps.ariaActiveDescendantID = descendant;\n      _this.setState({\n        focusedOptionIndex: index\n      });\n\n      // to force a re-render of the outer component to change the aria props\n      _this.props.store.setEditorState(_this.props.store.getEditorState());\n    }, _this.commitSelection = function () {\n      if (!_this.props.store.getIsOpened()) {\n        return 'not-handled';\n      }\n      _this.onMentionSelect(_this.props.suggestions[_this.state.focusedOptionIndex]);\n      return 'handled';\n    }, _this.openDropdown = function () {\n      // This is a really nasty way of attaching & releasing the key related functions.\n      // It assumes that the keyFunctions object will not loose its reference and\n      // by this we can replace inner parameters spread over different modules.\n      // This better be some registering & unregistering logic. PRs are welcome :)\n      _this.props.callbacks.handleReturn = _this.commitSelection;\n      _this.props.callbacks.keyBindingFn = function (keyboardEvent) {\n        // arrow down\n        if (keyboardEvent.keyCode === 40) {\n          _this.onDownArrow(keyboardEvent);\n        }\n        // arrow up\n        if (keyboardEvent.keyCode === 38) {\n          _this.onUpArrow(keyboardEvent);\n        }\n        // escape\n        if (keyboardEvent.keyCode === 27) {\n          _this.onEscape(keyboardEvent);\n        }\n        // tab\n        if (keyboardEvent.keyCode === 9) {\n          _this.onTab(keyboardEvent);\n        }\n      };\n      var descendant = 'mention-option-' + _this.key + '-' + _this.state.focusedOptionIndex;\n      _this.props.ariaProps.ariaActiveDescendantID = descendant;\n      _this.props.ariaProps.ariaOwneeID = 'mentions-list-' + _this.key;\n      _this.props.ariaProps.ariaHasPopup = 'true';\n      _this.props.ariaProps.ariaExpanded = true;\n      _this.setState({\n        isActive: true\n      });\n      if (_this.props.onOpen) {\n        _this.props.onOpen();\n      }\n    }, _this.closeDropdown = function () {\n      // make sure none of these callbacks are triggered\n      _this.props.callbacks.handleReturn = undefined;\n      _this.props.callbacks.keyBindingFn = undefined;\n      _this.props.ariaProps.ariaHasPopup = 'false';\n      _this.props.ariaProps.ariaExpanded = false;\n      _this.props.ariaProps.ariaActiveDescendantID = undefined;\n      _this.props.ariaProps.ariaOwneeID = undefined;\n      _this.setState({\n        isActive: false\n      });\n      if (_this.props.onClose) {\n        _this.props.onClose();\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  _createClass(MentionSuggestions, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.key = (0, _draftJs.genKey)();\n      this.props.callbacks.onChange = this.onEditorStateChange;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.suggestions.length === 0 && this.state.isActive) {\n        this.closeDropdown();\n      } else if (nextProps.suggestions.length > 0 && nextProps.suggestions !== this.props.suggestions && !this.state.isActive) {\n        this.openDropdown();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n      if (!this.state.isActive) {\n        return null;\n      }\n      var _props = this.props,\n        entryComponent = _props.entryComponent,\n        _props$popoverCompone = _props.popoverComponent,\n        popoverComponent = _props$popoverCompone === undefined ? _react2.default.createElement('div', null) : _props$popoverCompone,\n        onClose = _props.onClose,\n        onOpen = _props.onOpen,\n        onAddMention = _props.onAddMention,\n        onSearchChange = _props.onSearchChange,\n        suggestions = _props.suggestions,\n        ariaProps = _props.ariaProps,\n        callbacks = _props.callbacks,\n        _props$theme = _props.theme,\n        theme = _props$theme === undefined ? {} : _props$theme,\n        store = _props.store,\n        entityMutability = _props.entityMutability,\n        positionSuggestions = _props.positionSuggestions,\n        mentionTrigger = _props.mentionTrigger,\n        mentionPrefix = _props.mentionPrefix,\n        elementProps = _objectWithoutProperties(_props, ['entryComponent', 'popoverComponent', 'onClose', 'onOpen', 'onAddMention', 'onSearchChange', 'suggestions', 'ariaProps', 'callbacks', 'theme', 'store', 'entityMutability', 'positionSuggestions', 'mentionTrigger', 'mentionPrefix']);\n      return _react2.default.cloneElement(popoverComponent, _extends({}, elementProps, {\n        className: theme.mentionSuggestions,\n        role: 'listbox',\n        id: 'mentions-list-' + this.key,\n        ref: function ref(element) {\n          _this2.popover = element;\n        }\n      }), this.props.suggestions.map(function (mention, index) {\n        return _react2.default.createElement(_Entry2.default, {\n          key: mention.id != null ? mention.id : mention.name,\n          onMentionSelect: _this2.onMentionSelect,\n          onMentionFocus: _this2.onMentionFocus,\n          isFocused: _this2.state.focusedOptionIndex === index,\n          mention: mention,\n          index: index,\n          id: 'mention-option-' + _this2.key + '-' + index,\n          theme: theme,\n          searchValue: _this2.lastSearchValue,\n          entryComponent: entryComponent || _defaultEntryComponent2.default\n        });\n      }));\n    }\n  }]);\n  return MentionSuggestions;\n}(_react.Component);\nMentionSuggestions.propTypes = {\n  entityMutability: _propTypes2.default.oneOf(['SEGMENTED', 'IMMUTABLE', 'MUTABLE']),\n  entryComponent: _propTypes2.default.func,\n  onAddMention: _propTypes2.default.func,\n  suggestions: _propTypes2.default.array\n};\nexports.default = MentionSuggestions;","map":null,"metadata":{},"sourceType":"script"}