{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _draftJsButtons = require('draft-js-buttons');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} /* eslint-disable react/no-array-index-key */\n\nvar getRelativeParent = function getRelativeParent(element) {\n  if (!element) {\n    return null;\n  }\n  var position = window.getComputedStyle(element).getPropertyValue('position');\n  if (position !== 'static') {\n    return element;\n  }\n  return getRelativeParent(element.parentElement);\n};\nvar AlignmentTool = function (_React$Component) {\n  _inherits(AlignmentTool, _React$Component);\n  function AlignmentTool() {\n    var _ref;\n    var _temp, _this, _ret;\n    _classCallCheck(this, AlignmentTool);\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AlignmentTool.__proto__ || Object.getPrototypeOf(AlignmentTool)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      position: {},\n      alignment: null\n    }, _this.onVisibilityChanged = function (visibleBlock) {\n      setTimeout(function () {\n        var position = void 0;\n        var boundingRect = _this.props.store.getItem('boundingRect');\n        if (visibleBlock) {\n          var relativeParent = getRelativeParent(_this.toolbar.parentElement);\n          var toolbarHeight = _this.toolbar.clientHeight;\n          var relativeRect = relativeParent ? relativeParent.getBoundingClientRect() : document.body.getBoundingClientRect();\n          position = {\n            top: boundingRect.top - relativeRect.top - toolbarHeight,\n            left: boundingRect.left - relativeRect.left + boundingRect.width / 2,\n            transform: 'translate(-50%) scale(1)',\n            transition: 'transform 0.15s cubic-bezier(.3,1.2,.2,1)'\n          };\n        } else {\n          position = {\n            transform: 'translate(-50%) scale(0)'\n          };\n        }\n        var alignment = _this.props.store.getItem('alignment') || 'default';\n        _this.setState({\n          alignment: alignment,\n          position: position\n        });\n      }, 0);\n    }, _this.onAlignmentChange = function (alignment) {\n      _this.setState({\n        alignment: alignment\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  _createClass(AlignmentTool, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.props.store.subscribeToItem('visibleBlock', this.onVisibilityChanged);\n      this.props.store.subscribeToItem('alignment', this.onAlignmentChange);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.props.store.unsubscribeFromItem('visibleBlock', this.onVisibilityChanged);\n      this.props.store.unsubscribeFromItem('alignment', this.onAlignmentChange);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n      var defaultButtons = [_draftJsButtons.AlignBlockDefaultButton, _draftJsButtons.AlignBlockLeftButton, _draftJsButtons.AlignBlockCenterButton, _draftJsButtons.AlignBlockRightButton];\n      var theme = this.props.theme;\n      return _react2.default.createElement('div', {\n        className: theme.alignmentToolStyles.alignmentTool,\n        style: this.state.position,\n        ref: function ref(toolbar) {\n          _this2.toolbar = toolbar;\n        }\n      }, defaultButtons.map(function (Button, index) {\n        return _react2.default.createElement(Button\n        /* the index can be used here as the buttons list won't change */, {\n          key: index,\n          alignment: _this2.state.alignment,\n          setAlignment: _this2.props.store.getItem('setAlignment'),\n          theme: theme.buttonStyles\n        });\n      }));\n    }\n  }]);\n  return AlignmentTool;\n}(_react2.default.Component);\nexports.default = AlignmentTool;","map":null,"metadata":{},"sourceType":"script"}