{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nexports.default = function (editorState, selection, type, data, entityType) {\n  var text = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : ' ';\n  var currentContentState = editorState.getCurrentContent();\n  var currentSelectionState = selection;\n\n  // in case text is selected it is removed and then the block is appended\n  var afterRemovalContentState = _draftJs.Modifier.removeRange(currentContentState, currentSelectionState, 'backward');\n\n  // deciding on the postion to split the text\n  var targetSelection = afterRemovalContentState.getSelectionAfter();\n  var blockKeyForTarget = targetSelection.get('focusKey');\n  var block = currentContentState.getBlockForKey(blockKeyForTarget);\n  var insertionTargetSelection = void 0;\n  var insertionTargetBlock = void 0;\n\n  // In case there are no characters or entity or the selection is at the start it\n  // is safe to insert the block in the current block.\n  // Otherwise a new block is created (the block is always its own block)\n  var isEmptyBlock = block.getLength() === 0 && block.getEntityAt(0) === null;\n  var selectedFromStart = currentSelectionState.getStartOffset() === 0;\n  if (isEmptyBlock || selectedFromStart) {\n    insertionTargetSelection = targetSelection;\n    insertionTargetBlock = afterRemovalContentState;\n  } else {\n    // the only way to insert a new seems to be by splitting an existing in to two\n    insertionTargetBlock = _draftJs.Modifier.splitBlock(afterRemovalContentState, targetSelection);\n\n    // the position to insert our blocks\n    insertionTargetSelection = insertionTargetBlock.getSelectionAfter();\n  }\n\n  // TODO not sure why we need it â€¦\n  var newContentStateAfterSplit = _draftJs.Modifier.setBlockType(insertionTargetBlock, insertionTargetSelection, type);\n\n  // creating a new ContentBlock including the entity with data\n  // Entity will be created with a specific type, if defined, else will fall back to the ContentBlock type\n  var contentStateWithEntity = newContentStateAfterSplit.createEntity(entityType || type, 'IMMUTABLE', _extends({}, data));\n  var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n  var charData = _draftJs.CharacterMetadata.create({\n    entity: entityKey\n  });\n  var fragmentArray = [new _draftJs.ContentBlock({\n    key: (0, _draftJs.genKey)(),\n    type: type,\n    text: text,\n    characterList: (0, _immutable.List)((0, _immutable.Repeat)(charData, text.length || 1)) // eslint-disable-line new-cap\n  }),\n  // new contentblock so we can continue wrting right away after inserting the block\n  new _draftJs.ContentBlock({\n    key: (0, _draftJs.genKey)(),\n    type: 'unstyled',\n    text: '',\n    characterList: (0, _immutable.List)() // eslint-disable-line new-cap\n  })];\n\n  // create fragment containing the two content blocks\n  var fragment = _draftJs.BlockMapBuilder.createFromArray(fragmentArray);\n\n  // replace the contentblock we reserved for our insert\n  return _draftJs.Modifier.replaceWithFragment(newContentStateAfterSplit, insertionTargetSelection, fragment);\n};\nvar _immutable = require('immutable');\nvar _draftJs = require('draft-js');","map":null,"metadata":{},"sourceType":"script"}