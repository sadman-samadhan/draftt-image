{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _clsx = require('clsx');\nvar _clsx2 = _interopRequireDefault(_clsx);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n// Get a component's display name\nvar getDisplayName = function getDisplayName(WrappedComponent) {\n  var component = WrappedComponent.WrappedComponent || WrappedComponent;\n  return component.displayName || component.name || 'Component';\n};\nexports.default = function (_ref) {\n  var theme = _ref.theme,\n    blockKeyStore = _ref.blockKeyStore;\n  return function (WrappedComponent) {\n    var _class, _temp2;\n    return _temp2 = _class = function (_Component) {\n      _inherits(BlockFocusDecorator, _Component);\n      function BlockFocusDecorator() {\n        var _ref2;\n        var _temp, _this, _ret;\n        _classCallCheck(this, BlockFocusDecorator);\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = BlockFocusDecorator.__proto__ || Object.getPrototypeOf(BlockFocusDecorator)).call.apply(_ref2, [this].concat(args))), _this), _this.onClick = function (evt) {\n          evt.preventDefault();\n          if (!_this.props.blockProps.isFocused) {\n            _this.props.blockProps.setFocusToBlock();\n          }\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n      }\n      _createClass(BlockFocusDecorator, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n          blockKeyStore.add(this.props.block.getKey());\n        }\n      }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n          blockKeyStore.remove(this.props.block.getKey());\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var _props = this.props,\n            blockProps = _props.blockProps,\n            className = _props.className;\n          var isFocused = blockProps.isFocused;\n          var combinedClassName = isFocused ? (0, _clsx2.default)(className, theme.focused) : (0, _clsx2.default)(className, theme.unfocused);\n          return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {\n            onClick: this.onClick,\n            className: combinedClassName\n          }));\n        }\n      }]);\n      return BlockFocusDecorator;\n    }(_react.Component), _class.displayName = 'BlockFocus(' + getDisplayName(WrappedComponent) + ')', _class.WrappedComponent = WrappedComponent.WrappedComponent || WrappedComponent, _temp2;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}