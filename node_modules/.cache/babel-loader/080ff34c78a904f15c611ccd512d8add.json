{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = onDropFile;\nvar _draftJs = require('draft-js');\nvar _file = require('./utils/file');\n\n// import { getBlocksWhereEntityData } from './utils/block';\n\n/* function defaultHandleBlock(state, selection, data, defaultBlockType) {\n  return addBlock(state, selection, defaultBlockType, data);\n} */\n\n// import replaceBlock from './modifiers/replaceBlock';\n// import modifyBlockData from './modifiers/modifyBlockData';\nfunction onDropFile(config) {\n  return function onDropFileInner(selection, files, _ref) {\n    var getEditorState = _ref.getEditorState,\n      setEditorState = _ref.setEditorState;\n\n    // TODO need to make sure the correct image block is added\n    // TODO -> addImage must be passed in. content type matching should happen\n\n    // TODO make sure the Form building also works fine with S3 direct upload\n\n    // Get upload function from config or editor props\n    var handleUpload = config.handleUpload;\n    if (handleUpload) {\n      var formData = new FormData();\n\n      // Set data {files: [Array of files], formData: FormData}\n      var data = {\n        files: [],\n        formData: formData\n      };\n      for (var key in files) {\n        // eslint-disable-line no-restricted-syntax\n        if (files[key] && files[key] instanceof File) {\n          data.formData.append('files', files[key]);\n          data.files.push(files[key]);\n        }\n      }\n      setEditorState(_draftJs.EditorState.acceptSelection(getEditorState(), selection));\n\n      // Read files on client side\n      (0, _file.readFiles)(data.files).then(function (placeholders) {\n        // Add blocks for each image before uploading\n        var editorState = getEditorState();\n        placeholders.forEach(function (placeholder) {\n          editorState = config.addImage(editorState, placeholder.src);\n        });\n        setEditorState(editorState);\n\n        // Perform upload\n        // handleUpload(data, (uploadedFiles, { retainSrc }) => {\n        //   // Success, remove 'progress' and 'src'\n        //   let newEditorState = getEditorState();\n        //   uploadedFiles.forEach((file) => {\n        //     const blocks = getBlocksWhereEntityData(state, (block) => block.src === file.src && block.progress !== undefined);\n        //     if (blocks.size) {\n        //       const newEditorStateOrBlockType = handleBlock\n        //         ? handleBlock(newEditorState, newEditorState.getSelection(), file)\n        //         : defaultBlockType;\n        //\n        //       newEditorState = replaceBlock(\n        //         modifyBlockData(\n        //           newEditorState,\n        //           blocks.first().get('key'),\n        //           retainSrc ? { progress: undefined } : { progress: undefined, src: undefined }\n        //         ),\n        //         blocks.first().get('key'),\n        //         newEditorStateOrBlockType\n        //       );\n        //     } /* else {\n        //       const newEditorStateOrBlockType = handleBlock\n        //         ? handleBlock(newEditorState, newEditorState.getSelection(), file)\n        //         : defaultHandleBlock(newEditorState, newEditorState.getSelection(), file, defaultBlockType);\n        //\n        //       if (!newEditorStateOrBlockType) {\n        //         newEditorState = defaultHandleBlock(newEditorState, selection, file, defaultBlockType);\n        //       } else if (typeof newEditorStateOrBlockType === 'string') {\n        //         newEditorState = defaultHandleBlock(newEditorState, selection, file, newEditorStateOrBlockType);\n        //       } else {\n        //         newEditorState = newEditorStateOrBlockType;\n        //       }\n        //     } */\n        //   });\n        //\n        //   // Propagate progress\n        //   if (handleProgress) handleProgress(null);\n        //   setEditorState(newEditorState);\n        // }, () => {\n        //   // console.error(err);\n        // }, (percent) => {\n        //   // On progress, set entity data's progress field\n        //   let newEditorState = getEditorState();\n        //   placeholders.forEach((placeholder) => {\n        //     const blocks = getBlocksWhereEntityData(newEditorState, (p) => p.src === placeholder.src && p.progress !== undefined);\n        //     if (blocks.size) {\n        //       newEditorState = modifyBlockData(newEditorState, blocks.first().get('key'), { progress: percent });\n        //     }\n        //   });\n        //   setEditorState(newEditorState);\n        //\n        //   // Propagate progress\n        //   if (handleProgress) {\n        //     handleProgress(percent);\n        //   }\n        // });\n      });\n\n      return 'handled';\n    }\n    return undefined;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}